from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters.state import StateFilter

from tg_bot.adminka.callbacks.catalog.subcategory import *
from tg_bot.adminka.keyboards.catalog import subcategory as kb
from tg_bot.adminka.states.catalog import SubcategoryStates

from tg_bot.infra.database import async_session
from tg_bot.adminka.repositories.catalog.subcategory import SubcategoryRepo
from tg_bot.adminka.repositories.catalog.category import CategoryRepo

from tg_bot.adminka.utils import parse_text

router = Router()


@router.callback_query(SubcategoryPanelCallback.filter(), )
async def edit_subcategory_panel_cmd(call: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        categories = await CategoryRepo(session).get_categories()
    await state.clear()
    await call.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        reply_markup=kb.build_category_select_panel(categories=categories)
    )


# ======================== EDIT: handlers for edit subcategory ========================
@router.callback_query(
    SelectCategoryForSubcategoryEditPanelCallback.filter(),
    StateFilter(
        default_state,
        SubcategoryStates.edit_name, SubcategoryStates.edit_desc,
        SubcategoryStates.new_name, SubcategoryStates.new_desc
    )
)
async def edit_subcategory_panel_select_category_cmd(call: CallbackQuery,
                                                     callback_data: SelectCategoryForSubcategoryEditPanelCallback,
                                                     state: FSMContext):
    category_id = callback_data.id
    async with async_session() as session:
        subcategories = await SubcategoryRepo(session).get_subcategories_by_category_id(category_id)
    await state.clear()
    await call.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n'
        '‚úèÔ∏è - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n'
        'üìñ - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n'
        '‚ùå - —É–¥–∞–ª–∏—Ç—å',
        reply_markup=kb.build_subcategory_manage_panel(subcategories, category_id)
    )


# ======== Delete ========
@router.callback_query(DeleteSubcategoryCallback.filter(), StateFilter(default_state))
async def edit_subcategory_del_cmd(call: CallbackQuery, callback_data: DeleteSubcategoryCallback, state: FSMContext):
    subcategory_id, category_id = callback_data.id, callback_data.category_id
    await call.message.edit_text(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n'
        '‚ùóÔ∏èÔ∏è<b><i>–≠—Ç–æ —É–¥–∞–ª–∏—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è</i></b>',
        reply_markup=kb.confirm_delete_subcategory(subcategory_id, category_id)
    )


@router.callback_query(ConfirmDeleteSubcategoryCallback.filter(), StateFilter(default_state))
async def edit_subcategory_del_confirm_cmd(call: CallbackQuery, callback_data: ConfirmDeleteSubcategoryCallback):
    subcategory_id, action, category_id = callback_data.id, callback_data.action, callback_data.category_id
    if not action:
        await call.message.edit_text(
            '–û—Ç–º–µ–Ω–µ–Ω–æ',
            reply_markup=kb.back_to_subcategory_edit_panel(category_id)
        )
    else:
        async with async_session() as session:
            await SubcategoryRepo(session).delete_subcategory(subcategory_id)
        await call.message.edit_text(
            '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞',
            reply_markup=kb.back_to_subcategory_edit_panel(category_id)
        )


# ======== Edit name ========
@router.callback_query(EditSubcategoryNameCallback.filter(), StateFilter(default_state))
async def edit_subcategory_name_cmd(call: CallbackQuery, callback_data: EditSubcategoryNameCallback, state: FSMContext):
    subcategory_id, category_id = callback_data.id, callback_data.category_id
    await state.set_state(SubcategoryStates.edit_name)
    await state.update_data({
        'subcategory_id': subcategory_id,
        'category_id': category_id
    })
    await call.message.edit_text(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=kb.back_to_subcategory_edit_panel(category_id=category_id)
    )


@router.message(SubcategoryStates.edit_name)
async def edit_subcategory_name_process_cmd(message: Message, state: FSMContext):
    async with async_session() as session:
        await SubcategoryRepo(session).update_name(
            subcategory_id=await state.get_value('subcategory_id'),
            name=message.text
        )
    category_id = await state.get_value('category_id')
    await state.clear()
    await message.answer(
        '–ù–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!',
        reply_markup=kb.back_to_subcategory_edit_panel(category_id=category_id)
    )


# ======== Edit description ========
@router.callback_query(EditSubcategoryDescriptionCallback.filter(), StateFilter(default_state))
async def edit_subcategory_description_cmd(
        call: CallbackQuery,
        callback_data: EditSubcategoryDescriptionCallback,
        state: FSMContext
):
    subcategory_id, category_id = callback_data.id, callback_data.category_id
    await state.set_state(SubcategoryStates.edit_desc)
    await state.update_data({
        'subcategory_id': subcategory_id,
        'category_id': category_id
    })
    await call.message.edit_text(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=kb.back_to_subcategory_edit_panel(category_id=category_id)
    )


@router.message(StateFilter(SubcategoryStates.edit_desc))
async def edit_subcategory_description_process_cmd(
        message: Message,
        state: FSMContext
):
    data = await state.get_data()
    description = message.text
    if len(description) >= 1024:
        await message.answer(
            '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
            reply_markup=kb.back_to_subcategory_edit_panel(category_id=data['category_id'])
        )
        return
    async with async_session() as session:
        await SubcategoryRepo(session).update_description(
            subcategory_id=data['subcategory_id'],
            description=parse_text(message)
        )
    await message.answer(
        '–û–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!',
        reply_markup=kb.back_to_subcategory_edit_panel(category_id=data['category_id'])
    )


# ======================== NEW: handlers for adding new category ========================
@router.callback_query(NewSubcategoryCallback.filter(), StateFilter(default_state))
async def edit_subcategory_new_cmd(call: CallbackQuery, callback_data: NewSubcategoryCallback, state: FSMContext):
    category_id = callback_data.category_id
    await state.set_state(SubcategoryStates.new_name)
    await state.update_data({
        'category_id': category_id
    })
    await call.message.edit_text(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=kb.back_to_subcategory_edit_panel(category_id)
    )


@router.message(StateFilter(SubcategoryStates.new_name))
async def edit_subcategory_new_process_cmd(message: Message, state: FSMContext):
    category_id = await state.get_value('category_id')
    name = message.text
    async  with async_session() as session:
        is_exists = await SubcategoryRepo(session).get_subcategory_id_by_name(name)
    if is_exists:
        await message.answer(
            '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
            reply_markup=kb.back_to_subcategory_edit_panel(category_id)
        )
        return
    await state.update_data({'name': name})
    await state.set_state(SubcategoryStates.new_desc)
    await message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=kb.back_to_subcategory_edit_panel(category_id)
    )


@router.message(StateFilter(SubcategoryStates.new_desc))
async def edit_subcategory_new_process_cmd(message: Message, state: FSMContext):
    data = await state.get_data()
    description = message.text
    if len(description) >= 1024:
        await message.answer(
            '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
            reply_markup=kb.back_to_subcategory_edit_panel(data['category_id'])
        )
        return
    async with async_session() as session:
        await SubcategoryRepo(session).add_subcategory(
            name=message.text, category_id=data['category_id'],description=parse_text(message)
        )
    await state.clear()
    await message.answer(
        '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
        reply_markup=kb.back_to_subcategory_edit_panel(data['category_id'])
    )
