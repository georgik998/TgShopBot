from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters.state import StateFilter

from tg_bot.adminka.callbacks.catalog.category import *
from tg_bot.adminka.keyboards.catalog import category as kb
from tg_bot.adminka.states.catalog import CategoryStates

from tg_bot.infra.database import async_session
from tg_bot.adminka.repositories.catalog.category import CategoryRepo

from tg_bot.adminka.utils import parse_text

router = Router()


@router.callback_query(
    CategoryPanelCallback.filter(),
    StateFilter(
        default_state,
        CategoryStates.new_name, CategoryStates.new_desc,
    )
)
async def category_cmd(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=kb.category_panel
    )


# ======================== NEW: handlers for adding new category ========================
@router.callback_query(NewCategoryCallback.filter(), StateFilter(default_state))
async def new_category_cmd(call: CallbackQuery, state: FSMContext):
    await state.set_state(CategoryStates.new_name)
    await call.message.edit_text(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=kb.back_to_category_panel
    )


@router.message(StateFilter(CategoryStates.new_name))
async def new_category_name_cmd(message: Message, state: FSMContext):
    name = message.text
    async with async_session() as session:
        is_exists = await CategoryRepo(session).get_category_id_by_name(name)
    if is_exists:
        await message.answer(
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
            reply_markup=kb.back_to_category_panel
        )
        return
    else:
        await state.update_data({'name': name})
        await state.set_state(CategoryStates.new_desc)
        await message.answer(
            '–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            reply_markup=kb.back_to_category_panel
        )


@router.message(StateFilter(CategoryStates.new_desc))
async def new_category_desc_cmd(message: Message, state: FSMContext):
    description = message.text
    if len(description) >= 1024:
        await message.answer(
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è 1024 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
            reply_markup=kb.back_to_category_panel
        )
        return
    name = await state.get_value('name')
    async with async_session() as session:
        await CategoryRepo(session).add_category(
            name=name,
            description=parse_text(message)
        )
    await state.clear()
    await message.answer(
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
        reply_markup=kb.back_to_category_panel
    )


# ======================== EDIT: handlers for edit category ========================
@router.callback_query(
    EditCategoryCallback.filter(),
    StateFilter(
        default_state,
        CategoryStates.edit_name, CategoryStates.edit_desc
    )
)
async def edit_category_panel_cmd(call: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        categories = await CategoryRepo(session).get_categories()
    await state.clear()
    await call.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n'
        '‚úèÔ∏è - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n'
        'üìñ - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n'
        '‚ùå - —É–¥–∞–ª–∏—Ç—å',
        reply_markup=kb.build_category_manage_panel(data=categories)
    )


# ======== Delete ========
@router.callback_query(DeleteCategoryCallback.filter(), StateFilter(default_state))
async def edit_category_del_cmd(call: CallbackQuery, callback_data: DeleteCategoryCallback, state: FSMContext):
    category_id = callback_data.id
    await call.message.edit_text(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n'
        '‚ùóÔ∏èÔ∏è<b><i>–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è</i></b>',
        reply_markup=kb.confirm_delete_category(category_id)
    )


@router.callback_query(ConfirmDeleteCategoryCallback.filter(), StateFilter(default_state))
async def edit_category_del_confirm_cmd(call: CallbackQuery, callback_data: ConfirmDeleteCategoryCallback):
    category_id, action = callback_data.id, callback_data.action
    if not action:
        await call.message.edit_text(
            '–û—Ç–º–µ–Ω–µ–Ω–æ',
            reply_markup=kb.back_to_category_edit_panel
        )
    else:
        async with async_session() as session:
            await CategoryRepo(session).delete_category(category_id)
        await call.message.edit_text(
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞',
            reply_markup=kb.back_to_category_edit_panel
        )


# ======== Edit name ========
@router.callback_query(EditCategoryNameCallback.filter(), StateFilter(default_state))
async def edit_category_name_cmd(call: CallbackQuery, callback_data: EditCategoryNameCallback, state: FSMContext):
    await state.set_state(CategoryStates.edit_name)
    await state.update_data({'category_id': callback_data.id})
    await call.message.edit_text(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=kb.back_to_category_edit_panel
    )


@router.message(StateFilter(CategoryStates.edit_name))
async def edit_category_name_process_cmd(message: Message, state: FSMContext):
    name = message.text
    async with async_session() as session:
        await CategoryRepo(session).update_name(category_id=await state.get_value('category_id'), name=name)
    await state.clear()
    await message.answer(
        '–ù–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!',
        reply_markup=kb.back_to_category_edit_panel
    )


# ======== Edit description ========
@router.callback_query(
    EditCategoryDescriptionCallback.filter(),
    StateFilter(
        default_state
    )
)
async def edit_category_description_callback_cmd(
        call: CallbackQuery,
        callback_data: EditCategoryNameCallback,
        state: FSMContext
):
    await state.set_state(CategoryStates.edit_desc)
    await state.update_data({'category_id': callback_data.id})
    await call.message.edit_text(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        reply_markup=kb.back_to_category_edit_panel
    )


@router.message(
    StateFilter(
        CategoryStates.edit_desc
    )
)
async def edit_category_desc_process_cmd(
        message: Message,
        state: FSMContext
):
    description = message.text
    if len(description) >= 1024:
        await message.answer(
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è 1024 —Å–∏–º–≤–æ–ª–∞',
            reply_markup=kb.back_to_category_edit_panel
        )
        return

    category_id = await state.get_value('category_id')
    async with async_session() as session:
        await CategoryRepo(session).patch_description(category_id, parse_text(message))

    await state.clear()
    await message.answer(
        '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!',
        reply_markup=kb.back_to_category_edit_panel
    )
