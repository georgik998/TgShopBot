from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import StateFilter
from html import escape

from tg_bot.adminka.callbacks.main import RefLinksCallback
from tg_bot.adminka.callbacks.ref_link import *
from tg_bot.adminka.keyboards import ref_links as kb

from tg_bot.infra.database import async_session
from tg_bot.adminka.repositories.ref_links import RefLinkRepo
from tg_bot.adminka.states.ref_link import EditRefLink

from tg_bot.config import bot_settings

router = Router()


@router.callback_query(RefLinksCallback.filter(), StateFilter(default_state))
async def ref_links_panel_cmd(call: CallbackQuery):
    async with async_session() as session:
        links = await RefLinkRepo(session).get_all()
    await call.message.edit_text(
        'üíà –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n'
        '\n'
        '‚úçÔ∏è –ö–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ <b>–ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä</b> —Å—Å—ã–ª–∫–∏ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        reply_markup=kb.ref_links_manage_panel(links)
    )


@router.callback_query(NewRefLinkCallback.filter(), StateFilter(default_state))
async def new_ref_link_cmd(call: CallbackQuery):
    async with async_session() as session:
        link_id = await RefLinkRepo(session).post()
        links = await RefLinkRepo(session).get_all()
    await call.message.answer(
        f'‚úÖ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n'
        f'{bot_settings.BOT_URL}?start=ref{link_id}'
    )
    await call.message.edit_text(
        'üíà –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n'
        '\n'
        '‚úçÔ∏è –ö–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ <b>–ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä</b> —Å—Å—ã–ª–∫–∏ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        reply_markup=kb.ref_links_manage_panel(links)
    )


@router.callback_query(EditRefLinkCallback.filter(), StateFilter(default_state, EditRefLink.label))
async def edit_ref_link_panel_cmd(call: CallbackQuery, callback_data: EditRefLinkCallback, state: FSMContext):
    id = callback_data.id
    async with async_session() as session:
        ref_link = await RefLinkRepo(session).get_by_id(id)
    await state.clear()
    await call.message.edit_text(
        text=f"""üí†–†–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{bot_settings.BOT_URL}?start=ref{ref_link.id}
üìç–ú–µ—Ç–∫–∞:
<blockquote>{escape(ref_link.label)}</blockquote>

üë§–ü—Ä–∏—à–ª–æ —é–∑–µ—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: <b><i>{ref_link.invited} —á–µ–ª–æ–≤–µ–∫</i></b>
üí∏–ü–æ–ø–æ–ª–Ω–µ–Ω–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞: <code>{ref_link.income}‚ÇΩ</code>
""",
        reply_markup=kb.edit_ref_link(ref_link)
    )


# ======== Edit label ======= #
@router.callback_query(EditLabelRefLinKCallback.filter(), StateFilter(default_state))
async def edit_label_ref_link_cmd(call: CallbackQuery, callback_data: EditRefLinkCallback, state: FSMContext):
    id = callback_data.id
    await state.update_data({'id': id})
    await state.set_state(EditRefLink.label)
    await call.message.edit_text(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è —Å—Å—ã–ª–∫–∏',
        reply_markup=kb.back_to_edit_ref_link_button(id)
    )


@router.message(EditRefLink.label)
async def update_label_ref_link_cmd(message: Message, state: FSMContext):
    label = message.text
    id = await state.get_value('id')
    if not label or len(label) > 512:
        await message.answer(
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Ç–∫–∏ 512 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞',
            reply_markup=kb.back_to_edit_ref_link_button(id)
        )
        return
    async with async_session() as session:
        await RefLinkRepo(session).patch_label(id=id, label=label)
        ref_link = await RefLinkRepo(session).get_by_id(id)
    await state.clear()
    await message.answer(
        text=f"""üí†–†–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{bot_settings.BOT_URL}?start=ref{ref_link.id}
üìç–ú–µ—Ç–∫–∞:
<blockquote>{escape(ref_link.label)}</blockquote>

üë§–ü—Ä–∏—à–ª–æ —é–∑–µ—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: <b><i>{ref_link.invited}</i></b>
üí∏–ü–æ–ø–æ–ª–Ω–µ–Ω–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞: <code>{ref_link.income}‚ÇΩ</code>
    """,
        reply_markup=kb.edit_ref_link(ref_link)
    )


# ======== Reset statistic======= #
@router.callback_query(ResetRefLinkCallback.filter(), StateFilter(default_state))
async def reset_ref_link_cmd(call: CallbackQuery, callback_data: ResetRefLinkCallback):
    id = callback_data.id
    await call.message.edit_text(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–µ?',
        reply_markup=kb.reset_ref_link_cmd(id)
    )


@router.callback_query(ConfirmResetRefLinkCallback.filter(), StateFilter(default_state))
async def cofirm_reset_ref_link(call: CallbackQuery, callback_data: ConfirmResetRefLinkCallback):
    id, action = callback_data.id, callback_data.action
    if action:
        await call.answer('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞')
        async with async_session() as session:
            await RefLinkRepo(session).delete_statistic_by_id(id)
            ref_link = await RefLinkRepo(session).get_by_id(id)
    else:
        await call.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')
        async with async_session() as session:
            ref_link = await RefLinkRepo(session).get_by_id(id)
    await call.message.edit_text(
        text=f"""üí†–†–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{bot_settings.BOT_URL}?start=ref{ref_link.id}
üìç–ú–µ—Ç–∫–∞:
<blockquote>{escape(ref_link.label)}</blockquote>

üë§–ü—Ä–∏—à–ª–æ —é–∑–µ—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: <b><i>{ref_link.invited} —á–µ–ª–æ–≤–µ–∫</i></b>
üí∏–ü–æ–ø–æ–ª–Ω–µ–Ω–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞: <code>{ref_link.income}‚ÇΩ</code>""",
        reply_markup=kb.edit_ref_link(ref_link)
    )


# ======== Delete ======= #
@router.callback_query(DelRefLinkCallback.filter(), StateFilter(default_state))
async def del_ref_link_cmd(call: CallbackQuery, callback_data: DelRefLinkCallback):
    id = callback_data.id
    await call.message.edit_text(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É?',
        reply_markup=kb.del_ref_link_cmd(id)
    )


@router.callback_query(ConfirmDelRefLinkCallback.filter(), StateFilter(default_state))
async def confirm_del_ref_link_cmd(call: CallbackQuery, callback_data: ConfirmDelRefLinkCallback):
    action, id = callback_data.action, callback_data.id
    if action:
        async with async_session() as session:
            await RefLinkRepo(session).delete_by_id(id)
        await call.message.edit_text(
            'üóë –£–¥–∞–ª–µ–Ω–æ',
            reply_markup=kb.bact_to_ref_link
        )
    else:
        async with async_session() as session:
            ref_link = await RefLinkRepo(session).get_by_id(id)
        await call.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')
        await call.message.edit_text(
            text=f"""üí†–†–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{bot_settings.BOT_URL}?start=ref{ref_link.id}
üìç–ú–µ—Ç–∫–∞:
<blockquote>{escape(ref_link.label)}</blockquote>

üë§–ü—Ä–∏—à–ª–æ —é–∑–µ—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: <b><i>{ref_link.invited}</i></b>
üí∏–ü–æ–ø–æ–ª–Ω–µ–Ω–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞: <code>{ref_link.income}‚ÇΩ</code>""",
            reply_markup=kb.edit_ref_link(ref_link)
        )
